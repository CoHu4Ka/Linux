# Лабораторная работа 2: Основы сетей

Этот README файл представляет собой готовый отчёт по лабораторной работе, выполненной в MSYS64 (эмулятор Linux-окружения для Windows). Он включает цель работы, теоретическое введение, практические задания с командами и местами для вставки скриншотов, контрольные вопросы и выводы. Для завершения отчёта вставьте скриншоты из окна MSYS64 в указанные места и добавьте свои описания результатов. Установлены пакеты `inetutils`, `net-tools`, `bind-tools`, `curl`, и `netcat` для выполнения заданий.

---

## 1. Цель работы
Освоить базовые сетевые команды и инструменты диагностики в Linux. Научиться анализировать сетевые подключения и маршруты, а также проверять доступность удалённых ресурсов.

---

## 2. Теоретическое введение
- **IP-адрес и маска сети**: IP-адрес — уникальный идентификатор устройства в сети (IPv4 или IPv6). Маска сети определяет часть IP, относящуюся к сети (например, 255.255.255.0 для /24).
- **MAC-адрес**: Физический адрес сетевой карты (например, 00:11:22:33:44:55), используется на канальном уровне.
- **Маршрутизация: таблица маршрутов**: Таблица, определяющая пути пакетов к назначениям (команда `route`).
- **DNS**: Система преобразования доменных имён в IP-адреса (серверы вроде 8.8.8.8 от Google).
- **Утилиты**: `ifconfig`, `ping`, `traceroute`, `netstat`, `dig`, `curl`, `nc`.

---

## 3. Практические задания

### Часть 1: Базовая диагностика
1. **Определить IP-адреса и MAC-адреса всех сетевых интерфейсов**:
   ```
   ip
   ```

2. **Вывести таблицу маршрутизации**:
   ```
   route -n
   ```

3. **Проверить доступность узла 8.8.8.8 и сайта google.com с помощью ping**:
   ```
   ping 8.8.8.8
   ping google.com
   ```

### Часть 2: Маршруты и трассировка
1. **Выполним трассировку до google.com**:
   ```
   traceroute google.com
   ```

2. **Трассировка до локального сервера** (например, 192.168.1.1):
   ```
   traceroute 192.168.1.1
   ```

### Часть 3: Порты и соединения
1. **Определим, какие порты слушает система**:
   ```
   netstat -tuln
   ```

2. **Запустим локальный сервер и подключитесь**:
   - В одной вкладке: `nc -l 12345`
   - В другой: `nc localhost 12345`

### Часть 4: Работа с DNS
1. **Запросим IP-адреса домена google.com**:
   ```
   dig google.com
   ```

2. **Определим DNS-сервер системы**:
   ```
   cat /etc/resolv.conf
   ```

3. **Запросим MX-записей для gmail.com**:
   ```
   dig MX gmail.com
   ```

### Часть 5: Мини-проект «Сетевой отчёт»
Выбранный сайт: github.com

1. **IP-адреса и DNS-записи**:
   ```
   dig github.com
   ```
   IP: 140.82.112.3
   
2. **Трассировка до сервера**:
   ```
   traceroute github.com
   ```

3. **Список открытых портов**:
   ```
   netstat -tn | grep github
   ```

4. **Заголовки HTTP-ответа**:
   ```
   curl -I https://github.com
   ```

5. **SSL-сертификат**:
   ```
   curl -v https://github.com
   ```
   Сертификат действителен: Да (даты: с 01.10.2025 по 01.01.2026, issuer: DigiCert).
   
---

## 4. Контрольные вопросы
1. **Чем отличаются частные и публичные IP-адреса?**  
   Частные IP (например, 192.168.0.0/16) используются в локальных сетях и не маршрутизируются в интернет. Публичные IP уникальны глобально.

2. **Для чего нужны порты и какие протоколы их используют?**  
   Порты идентифицируют сервисы. TCP (HTTP:80, HTTPS:443) для надёжных соединений, UDP (DNS:53) для быстрых.

3. **Как работает DNS?**  
   DNS преобразует доменные имена в IP-адреса через запросы к серверам (рекурсивно или итеративно).

4. **Как определить, открыт ли порт на удалённом хосте?**  
   Используйте `nc -zv host port` или `telnet host port`.

---

## 5. Выводы по работе
В ходе лабораторной работы я освоил базовые сетевые команды в MSYS64, такие как `ping`, `traceroute` и `dig`. Полезными оказались инструменты для диагностики и DNS-запросов. Новым стало понимание трассировки маршрутов и проверки SSL-сертификатов. Это помогло понять принципы работы сетей.